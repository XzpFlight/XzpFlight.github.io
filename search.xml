<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Explore sorting algorithms:from bubble to cardinality</title>
      <link href="/2023/08/11/Detailed-Explanation-of-Top-Ten-Sorting-Algorithms/"/>
      <url>/2023/08/11/Detailed-Explanation-of-Top-Ten-Sorting-Algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="十大排序算法详解"><a href="#十大排序算法详解" class="headerlink" title="十大排序算法详解"></a>十大排序算法详解</h1><p>在计算机科学中，排序算法是一种将一组元素按照特定顺序排列的算法。排序算法是解决各种排序问题的基础，它们的性能和适用场景各不相同。本文将介绍数据结构中的十大排序算法，以及它们的实现原理和C++代码示例。</p><h2 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h2><p>冒泡排序是一种简单但效率较低的排序算法。它通过重复地遍历要排序的列表，在每次遍历过程中比较相邻的两个元素，并根据需要交换位置，直到整个列表排序完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h2><p>选择排序每次从未排序的部分选择最小（或最大）的元素，并将其放到已排序部分的末尾。通过重复进行选择操作，最终可以得到一个有序列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> min_idx = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min_idx]) &#123;</span><br><span class="line">                min_idx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[min_idx];</span><br><span class="line">        arr[min_idx] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h2><p>插入排序的核心思想是将未排序的元素逐个插入到已排序部分的正确位置。通过不断地比较和移动元素，可以逐步构建有序列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> key = arr[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h2><p>希尔排序是一种改进的插入排序算法，它通过将整个列表分割成多个较小的子列表进行插入排序，并逐渐缩小子列表的规模，最终完成排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> gap = n/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-快速排序（Quick-Sort）"><a href="#5-快速排序（Quick-Sort）" class="headerlink" title="5. 快速排序（Quick Sort）"></a>5. 快速排序（Quick Sort）</h2><p>快速排序是一种高效的分治排序算法。它通过选择一个基准元素，将列表划分为两个子列表，其中一个子列表的所有元素都小于等于基准元素，另一个子列表的所有元素都大于基准元素。然后，对两个子列表递归地应用快速排序，最终得到有序列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = arr[high];</span><br><span class="line">    <span class="type">int</span> i = (low - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = low; j &lt;= high - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> temp = arr[i + <span class="number">1</span>];</span><br><span class="line">    arr[i + <span class="number">1</span>] = arr[high];</span><br><span class="line">    arr[high] = temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pi = <span class="built_in">partition</span>(arr, low, high);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">quickSort</span>(arr, low, pi - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, pi + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-归并排序（Merge-Sort）"><a href="#6-归并排序（Merge-Sort）" class="headerlink" title="6. 归并排序（Merge Sort）"></a>6. 归并排序（Merge Sort）</h2><p>归并排序是一种高效的分治排序算法。它将列表递归地划分为较小的子列表，然后将这些子列表按照顺序合并，最终得到有序列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并两个子数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n1 = mid - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n2 = right - mid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建临时数组</span></span><br><span class="line">    <span class="type">int</span> L[n1], R[n2];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数据复制到临时数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">        L[i] = arr[left + i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">        R[j] = arr[mid + <span class="number">1</span> + j];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个子数组</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = left;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class="line">            arr[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制剩余的元素（如果有）</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">        arr[k] = L[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">        arr[k] = R[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序主函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归排序左右子数组</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(arr, left, mid);</span><br><span class="line">        <span class="built_in">mergeSort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合并已排序的子数组</span></span><br><span class="line">        <span class="built_in">merge</span>(arr, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h2><p>堆排序是一种基于二叉堆数据结构的排序算法。它首先将列表转换为最大堆或最小堆，然后依次将堆顶元素移除并放入已排序部分，直到整个列表排序完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调整子树以满足堆性质</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> largest = i;  <span class="comment">// 初始化最大值为根节点</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果左子节点比最大值大，更新最大值</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest])</span><br><span class="line">        largest = left;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果右子节点比最大值大，更新最大值</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest])</span><br><span class="line">        largest = right;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果最大值不是根节点，进行交换并继续调整子树</span></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[largest]);</span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序主函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建最大堆（初始状态）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, i);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 依次将堆顶元素移动到已排序部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);  <span class="comment">// 将当前根节点（最大值）与最后一个叶子节点交换</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调整剩余的部分为最大堆</span></span><br><span class="line">        <span class="built_in">heapify</span>(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h2><p>计数排序是一种非比较排序算法，适用于已知数据范围的整数排序。它统计每个元素出现的次数，并根据统计信息对元素进行排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">countingSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查找列表中的最大值</span></span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">            max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建计数数组并初始化为0</span></span><br><span class="line">    <span class="type">int</span>* count = <span class="keyword">new</span> <span class="type">int</span>[max + <span class="number">1</span>]();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 统计元素出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        count[arr[i]]++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据计数数组重新排序元素</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (count[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[index] = i;</span><br><span class="line">            index++;</span><br><span class="line">            count[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h2><p>桶排序是一种非比较排序算法，适用于已知数据范围的浮点数排序。它将列表划分为一定数量的桶，然后将元素分配到对应的桶中，每个桶再使用其他排序算法或递归地进行排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用插入排序对桶内元素排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(vector&lt;<span class="type">float</span>&gt;&amp; bucket)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = bucket.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">float</span> key = bucket[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; bucket[j] &gt; key) &#123;</span><br><span class="line">            bucket[j + <span class="number">1</span>] = bucket[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bucketSort</span><span class="params">(<span class="type">float</span> arr[], <span class="type">int</span> n, <span class="type">int</span> numBuckets)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">float</span>&gt;&gt; <span class="built_in">buckets</span>(numBuckets);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将元素分配到桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> bucketIndex = arr[i] * numBuckets;</span><br><span class="line">        buckets[bucketIndex].<span class="built_in">push_back</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每个桶内的元素进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numBuckets; i++)</span><br><span class="line">        <span class="built_in">insertionSort</span>(buckets[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将桶内的元素按顺序放入原始数组</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numBuckets; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; buckets[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            arr[index] = buckets[i][j];</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h2><p>基数排序是一种非比较排序算法，适用于整数排序。它通过按照各个位数对元素进行排序，从最低有效位到最高有效位，最终得到有序列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求解最大值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMax</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">            max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序主函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">radixSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="built_in">getMax</span>(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每个位数进行计数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> exp = <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="type">int</span> output[n];  <span class="comment">// 存储排序后的结果</span></span><br><span class="line">        <span class="type">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 0-9的计数数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 统计当前位数上每个数字的出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            count[(arr[i] / exp) % <span class="number">10</span>]++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算累积次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 按照当前位数进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            output[count[(arr[i] / exp) % <span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            count[(arr[i] / exp) % <span class="number">10</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将排序后的结果复制回原始数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Here-is-a-table-analysis-of-the-sorting-algorithms-using-Markdown-syntax"><a href="#Here-is-a-table-analysis-of-the-sorting-algorithms-using-Markdown-syntax" class="headerlink" title="Here is a table analysis of the sorting algorithms using Markdown syntax:"></a>Here is a table analysis of the sorting algorithms using Markdown syntax:</h2><table><thead><tr><th>排序算法</th><th>时间复杂度</th><th>空间复杂度</th><th>适用场景</th></tr></thead><tbody><tr><td>冒泡排序</td><td>最好情况：O(n)<br>最坏情况：O(n^2)</td><td>O(1)</td><td>适用于小型数据集或基本有序的数据集，实现简单，但对于大规模数据效率较低</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(1)</td><td>适用于小型数据集，不占用额外空间，但对于大规模数据效率较低</td></tr><tr><td>插入排序</td><td>最好情况：O(n)<br>最坏情况：O(n^2)</td><td>O(1)</td><td>适用于小型数据集或基本有序的数据集，对于部分有序的数据效果较好</td></tr><tr><td>快速排序</td><td>平均情况：O(n*log(n))<br>最坏情况：O(n^2)</td><td>O(log(n))-O(n)</td><td>适用于大规模数据集，具有较高的平均性能，不需要额外空间</td></tr><tr><td>希尔排序</td><td>取决于增量序列的选择</td><td>O(1)</td><td>适用于中等大小的数据集，相较于简单排序算法，希尔排序在一定程度上提升了排序速度</td></tr><tr><td>归并排序</td><td>O(n*log(n))</td><td>O(n)</td><td>适用于大规模数据集，稳定且可靠，但占用较多的额外空间</td></tr><tr><td>堆排序</td><td>O(n*log(n))</td><td>O(1)</td><td>适用于大规模数据集，对于选择最大/最小元素具有高效性能，但不稳定</td></tr><tr><td>计数排序</td><td>O(n+k)（k为输入范围）</td><td>O(k)</td><td>适用于已知数据范围的整数排序，非常高效，但需要额外空间</td></tr><tr><td>桶排序</td><td>O(n+k)（k为桶的数量）</td><td>O(n+k)</td><td>适用于已知数据范围的浮点数排序，对于分布均匀的数据集效果较好</td></tr><tr><td>基数排序</td><td>O(d*(n+k))（d为最大元素位数，k为基数）</td><td>O(n+k)</td><td>适用于整数排序，特别是位数较小的整数，且数据集范围较小</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Data Structure Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风的旅程</title>
      <link href="/2023/08/11/xzp-fblog-ramblings/"/>
      <url>/2023/08/11/xzp-fblog-ramblings/</url>
      
        <content type="html"><![CDATA[<style>.bgm-button {    display: flex;    align-items: center;    justify-content: center;    width: 200px;    height: 50px;    background-color: #ff9900;    color: #fff;    font-size: 16px;    border-radius: 5px;    cursor: pointer;}.bgm-button:hover {    opacity: 0.8;}</style><div class="bgm-button" onclick="toggleBGM()">    <span id="play-icon">&#9658;</span>    <span id="pause-icon" style="display: none;">&#9208;</span>    在手机上可点击播放/暂停音乐</div><script>var audio = new Audio('http://rz7kkvufl.hn-bkt.clouddn.com/Cold%20-%20%E8%90%A8%E5%90%89.mp3');var playIcon = document.getElementById("play-icon");var pauseIcon = document.getElementById("pause-icon");function toggleBGM() {    if (audio.paused) {        audio.play();        playIcon.style.display = "none";        pauseIcon.style.display = "inline";    } else {        audio.pause();        playIcon.style.display = "inline";        pauseIcon.style.display = "none";    }}</script><h1 id="风的旅程"><a href="#风的旅程" class="headerlink" title="风的旅程"></a>风的旅程</h1><p>风来自很远的地方，轻柔地穿梭于时光的缝隙，<br>它带着远方的气息，漫游在无垠的天空中。</p><p>偶尔，风会停下脚步，近距离观察每一个细微的瞬间，<br>它轻抚花瓣，轻拂树叶，似乎在述说着流转的故事。</p><p>风没有栖息之处，却无所畏惧，<br>它以自由的姿态展翅飞翔，留下一串渐行渐远的足迹。</p><p><img src="http://rz7kkvufl.hn-bkt.clouddn.com/%E4%BA%BA%E5%83%8F3.jpg"></p><p>或许，风是在寻找迷失的灵魂，寻觅心灵的归宿，<br>它吹散沉重的忧伤，吹拂人们内心的尘埃。</p><p>风知道，每一个刹那瞬间都是美的存在，<br>它用轻轻的呼吸，将这美好的瞬间铭记于心灵深处。</p><p>去去也无妨，风终将回到起点，<br>它将带着经历的智慧，告诉那些犹豫前行的旅人：</p><p>生活如同风的旅程，不妨放飞心灵，追寻内心的真实，<br>在短暂的人生中，将美好的瞬间谱写成永恒的诗篇。</p><p>让风带走忧愁，让心灵荡起勇敢的涟漪，<br>风来自很远的地方，去去也无妨，让生命在追寻中闪烁绽放。<br><img src="http://rz7kkvufl.hn-bkt.clouddn.com/%E9%A3%8E%E6%99%AF1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> ramblings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>品读——中国四大名著</title>
      <link href="/2023/08/10/xiao-third-blog-reading/"/>
      <url>/2023/08/10/xiao-third-blog-reading/</url>
      
        <content type="html"><![CDATA[<h2 id="《红楼梦》"><a href="#《红楼梦》" class="headerlink" title="《红楼梦》"></a><strong>《红楼梦》</strong></h2><p>《红楼梦》是中国四大名著之一，被誉为中国古典小说的巅峰之作。它以贾、史、王、薛四大家族的兴衰为背景，通过一系列丰富多彩的人物形象和情节，展现了封建社会的种种弊端和虚伪。这部小说以其独特的艺术魅力和深刻的社会批判性使其在现实中依然具有重要的意义。</p><h3 id="观后感："><a href="#观后感：" class="headerlink" title="观后感："></a><strong>观后感：</strong></h3><p>《红楼梦》描绘了一个宏大而精致的封建社会，不仅仅是一部家族的兴衰史，更是对封建社会道德观念的深刻剖析。小说中的人物形象栩栩如生，他们追求权力、享乐和财富，却忽略了真正的人情与真善美。贾宝玉、林黛玉、王熙凤等人物的形象给人留下深刻的印象，他们既是传统文化的典型代表，也具备着普遍的生命意义。</p><p>《红楼梦》通过对贾、史、王、薛四大家族的描写，展现了封建社会的虚伪和道德沦丧。尤其是通过贾府的描述，小说深刻地揭示了封建家族内部权力斗争和人性的复杂性。从贾政、贾母到贾宝玉，他们身陷权谋之中，忘记了最初的善良与纯真。这些形象使读者深思封建社会的道德沦丧和人性的扭曲。</p><h3 id="与现实的联系："><a href="#与现实的联系：" class="headerlink" title="与现实的联系："></a>与现实的联系：</h3><p>《红楼梦》中描写的虚伪、权谋、财富追逐等主题在现实社会同样存在。封建社会虽已过去，但人性的弱点和社会问题依然存在。现实中，我们也经常看到人们追求权力、财富而忽略了真正的人情与真善美。贪污腐败、权力斗争等问题仍然不断涌现，这些现象与小说中描述的封建社会的虚伪性有着异曲同工之妙。</p><p>同时，《红楼梦》中展现的女性形象和性别歧视问题也与现实息息相关。小说中的女性形象丰满而复杂，她们有着自己的思想和情感，但却受制于封建社会的束缚。这使人们反思在现实社会中女性地位的问题和性别歧视的存在。</p><p>总的来说，《红楼梦》以其细腻的描写、深刻的人物形象和对封建社会弊端的批判，在现实中依然具有深远的意义。小说通过对社会和个人的剖析，引发了读者对现实社会的思考和反思。它不仅是一部文学作品，更是一面镜子，让人们反思人性的弱点、社会的问题，进而寻求改变和进步的可能性。</p><h2 id="《西游记》"><a href="#《西游记》" class="headerlink" title="《西游记》"></a>《西游记》</h2><p>《西游记》是中国四大名著之一，被誉为中国古代小说中的经典之作。它讲述了孙悟空、猪八戒、沙僧和唐僧师徒四人西天取经的故事，在奇幻的背景下，呈现了各种人物形象和故事情节。这部小说以其幽默风趣、寓意深远的特点，深受广大读者的喜爱，并在现实中有着广泛的影响。</p><h3 id="观后感：-1"><a href="#观后感：-1" class="headerlink" title="观后感："></a><strong>观后感：</strong></h3><p>《西游记》以其独特的创意和神话色彩成为中国古代小说中的经典之作。小说通过一系列想象丰富、情节曲折的故事，呈现了各种神仙、妖怪和人类的形象。其中最引人注目的是孙悟空，他聪明机智、勇敢无畏，成为了中国文化中具有象征意义的英雄形象。通过这些幽默而深刻的描写，小说传递了对于人性的思考和对于正义与善的追求。</p><p>《西游记》中的每个故事情节都寓意深远，蕴含着对人性、善恶、道德等方面的品味。小说中的形象和故事超越了现实世界的限制，带有一种超然的艺术感和哲学思考。孙悟空的反叛、唐僧的慈悲、猪八戒的贪婪和沙僧的忍耐，都给人以启示，让人们反思自身的行为和价值观。</p><h3 id="与现实的联系：-1"><a href="#与现实的联系：-1" class="headerlink" title="与现实的联系："></a>与现实的联系：</h3><p>《西游记》中的故事情节和人物形象在现实中也有着深远的影响。故事中展现出的对于正义与善的追求、对于勇气和智慧的推崇，都是现实生活中值得借鉴的品质。孙悟空作为一个反抗者和保护者的形象，给人们勇气和力量去面对困难和挑战。</p><p>同时，《西游记》中的人物形象也反映了人性中的弱点和问题。孙悟空的傲慢、猪八戒的贪婪等都是现实社会中存在的弱点，这使得人们反思自身的行为和修炼。</p><p>总的来说，《西游记》以其丰富的想象力和深刻的寓意，在现实中依然具有重要的价值。小说展示了正义与善的力量，鼓舞了人们勇气和智慧的追求。通过对人性的深刻描写，小说让读者反思自身的行为和思考，去探索人性的本质和价值观的塑造。</p><h2 id="《水浒传》"><a href="#《水浒传》" class="headerlink" title="《水浒传》"></a><strong>《水浒传》</strong></h2><p>《水浒传》是中国四大名著之一，被誉为中国古代小说中的巅峰之作。它以宋江等梁山好汉的故事为主线，描绘了农民起义和反抗封建统治的斗争。这部小说具有浓厚的英雄史诗风格，通过对人物形象的塑造和故事情节的铺陈，展现了正义与邪恶、忠诚与背叛等复杂的道德困境。</p><h3 id="观后感：-2"><a href="#观后感：-2" class="headerlink" title="观后感："></a><strong>观后感：</strong></h3><p>《水浒传》通过对宋江等108位梁山好汉的故事的描述，展现了他们的成长经历、人性斗争和忠诚品质。小说中的人物形象生动鲜明，每个梁山好汉都有自己的性格特点和命运轨迹，使读者能够真切地感受到他们的喜怒哀乐。小说还揭示了封建社会不公和压迫的问题，并以梁山好汉的反抗精神和正义情怀呼唤着社会的改变。</p><p>《水浒传》以其宏大的史诗气势和丰富的情节成为中国古代小说中的经典之作。小说中的英雄形象和故事情节激发着读者的崇高情怀和正义意识，展现了人性中的复杂性。</p><h3 id="与现实的联系：-2"><a href="#与现实的联系：-2" class="headerlink" title="与现实的联系："></a>与现实的联系：</h3><p>《水浒传》中描绘的农民起义、反抗封建统治的主题在现实中具有深刻的联系。尽管故事背景发生在古代，但其中所蕴含的反抗不义、追求自由和正义的精神依然具有现实意义。现实社会中，仍然存在着各种不公平和不正义的现象，人们对于这些问题的反抗和呼唤正义的声音依然存在。</p><p>同时，《水浒传》中塑造的人物形象也与现实中的人性存在共鸣。小说中的人物有着各式各样的性格和命运，有英勇善战的好汉，亦有机智狡诈的奸人，他们的行为和选择反映了现实中人性的复杂性。这使人们不仅能够欣赏故事的精彩，也能够思考和反思自身的行为和选择。</p><p>总的来说，《水浒传》以其壮观的叙事风格和对人性、正义的思考，在现实中依然具有重要的价值。小说通过对英雄形象和故事情节的描绘，引发了读者对社会现象的深思和社会变革的渴望。尽管时代变迁，但《水浒传》中所展现的人性困境和反抗精神依然在现实中具有重要的意义。</p><h2 id="《三国演义》"><a href="#《三国演义》" class="headerlink" title="《三国演义》"></a><strong>《三国演义》</strong></h2><p>《三国演义》是中国四大名著之一，是一部以中国历史上三国时期为背景的长篇历史小说。它以刘备、关羽、张飞等著名人物的故事为主线，描绘了三国鼎立的历史画卷。这部小说不仅展示了英雄豪杰的形象和战争的激烈，也反映了权谋斗争和人性的复杂性。</p><h3 id="观后感：-3"><a href="#观后感：-3" class="headerlink" title="观后感："></a><strong>观后感：</strong></h3><p>《三国演义》是一部宏大的历史史诗，通过对那个战乱纷争的时代的描写，展现了各类人物的命运和选择。小说中的人物形象栩栩如生，刘备、关羽、张飞等英雄人物给人留下了深刻的印象。他们或忠诚无私，或机智谋略，或短视贪婪，都是那个时代和社会的缩影。</p><p>《三国演义》通过对权谋斗争、英雄事迹的描写，展示了人性的复杂性。小说中的人物有着各自的欲望、利益和信仰，他们在权力的角逐中展现出各种品质和行为。这使得读者对于权力与道德、忠诚与背叛等问题进行了深刻思考。</p><h3 id="与现实的联系：-3"><a href="#与现实的联系：-3" class="headerlink" title="与现实的联系："></a>与现实的联系：</h3><p>《三国演义》中塑造的人物形象和情节在现实中有着深远的影响。故事中展现的权谋斗争、战争冲突等主题在现实社会中依然存在。人们对于权力、利益的追逐和争夺是人性中普遍存在的弱点。小说对权力、利益、忠诚等问题的探讨，引发了读者对现实社会的思考和反思。</p><p>同时，《三国演义》中英雄形象所表现的忠诚、勇气、智慧等品质也与现实中的人性存在共通之处。现实社会中仍然有人们追求正义、维护和平的行为，这些行为与小说中英雄形象所展现的特质不谋而合。</p><p>总的来说，《三国演义》以其壮阔的历史背景和丰富的人物群像，在现实中依然具有重要的意义。小说通过对权谋斗争和人性复杂性的描写，引发了读者对权力、道德和人性的思考。它不仅是一部具有历史价值的文学作品，也是一面反映现实社会中人性困境和价值观的镜子。</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 中国四大名著 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全网最细！————Analysis of classic algorithm problems of linked list</title>
      <link href="/2023/08/10/xiao-second-blog/"/>
      <url>/2023/08/10/xiao-second-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="链表经典算法题解析"><a href="#链表经典算法题解析" class="headerlink" title="链表经典算法题解析"></a>链表经典算法题解析</h1><p>链表是常用的数据结构之一，它由一系列节点组成，每个节点包含两个部分：数据和指向下一个节点的指针。在编程中，常常需要处理链表相关的问题，例如复制链表、找到环的入口节点、合并链表等。本文将对几个经典的链表算法题进行详细解析，并使用C++编程语言来实现（本文只提供Hard、Middle难度题的代码实现）。</p><h2 id="第一题：JZ35-复杂链表的复制（Hard）"><a href="#第一题：JZ35-复杂链表的复制（Hard）" class="headerlink" title="第一题：JZ35 复杂链表的复制（Hard）"></a>第一题：JZ35 复杂链表的复制（Hard）</h2><h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>算法首先检查链表是否为空，如果是空链表，则直接返回。</p><p>接下来，算法遍历原始链表，并进行拷贝操作。对于每个原始节点 <code>cur</code>，都创建一个新节点 <code>clone</code>，其值为原始节点的值。然后将新节点 <code>clone</code> 插入到原始节点 <code>cur</code> 后面。这样，新的链表中的节点就是原始链表的节点的拷贝。</p><p>接着，算法再次遍历链表，连接新链表的 <code>random</code> 节点。根据原始链表中的 <code>random</code> 指针，我们可以找到对应节点的拷贝节点的位置，然后将其赋给新链表节点的 <code>random</code> 指针。</p><p>最后，算法再次遍历链表，拆分原始链表和新链表。对于每个节点，我们将原始链表中的节点的 <code>next</code> 指针指向下一个原始节点，将新链表中的节点的 <code>next</code> 指针指向下一个新节点。</p><p>最终，算法返回复制后的链表的头指针。</p><p>该算法的时间复杂度为 O(n)，其中 n 是链表的长度。需要遍历链表三次，每次遍历都需要线性时间。</p><p>空间复杂度为 O(1)，即常数空间。除了复制出的新节点和一些指针变量外，没有使用额外的空间。</p><p>以下是用C++实现的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node* next;</span><br><span class="line">    Node* random;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>), <span class="built_in">random</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建拷贝节点并插入到原始节点后面</span></span><br><span class="line">    Node* cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        Node* clone = <span class="keyword">new</span> <span class="built_in">Node</span>(cur-&gt;val);</span><br><span class="line">        clone-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = clone;</span><br><span class="line">        cur = clone-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 连接拷贝节点的random指针</span></span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;random != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拆分原始链表和新链表</span></span><br><span class="line">    cur = head;</span><br><span class="line">    Node* cloneHead = head-&gt;next;</span><br><span class="line">    Node* cloneCur = cloneHead;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (cloneCur-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cloneCur-&gt;next = cloneCur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        cloneCur = cloneCur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cloneHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printLinkedList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; head-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;random != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; head-&gt;random-&gt;val &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;null&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建测试链表</span></span><br><span class="line">    Node* node1 = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">1</span>);</span><br><span class="line">    Node* node2 = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">2</span>);</span><br><span class="line">    Node* node3 = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">3</span>);</span><br><span class="line">    Node* node4 = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">4</span>);</span><br><span class="line">    Node* node5 = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = node4;</span><br><span class="line">    node4-&gt;next = node5;</span><br><span class="line">    </span><br><span class="line">    node1-&gt;random = node3;</span><br><span class="line">    node2-&gt;random = node4;</span><br><span class="line">    node4-&gt;random = node2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制链表</span></span><br><span class="line">    Node* cloneHead = <span class="built_in">copyRandomList</span>(node1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出原始链表和复制链表</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Original Linked List: &quot;</span>;</span><br><span class="line">    <span class="built_in">printLinkedList</span>(node1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Cloned Linked List: &quot;</span>;</span><br><span class="line">    <span class="built_in">printLinkedList</span>(cloneHead);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    Node* cur = node1;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        Node* temp = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cur = cloneHead;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        Node* temp = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码，将会输出以下结果：</p><p>Original Linked List: 1(3) -&gt; 2(4) -&gt; 3 -&gt; 4(2) -&gt; 5(null)<br>Cloned Linked List: 1(3) -&gt; 2(4) -&gt; 3 -&gt; 4(2) -&gt; 5(null)</p><p>请注意，为了方便起见，我在输出链表节点的值后面用括号表示了 <code>random</code> 指针指向的节点的值。</p><h2 id="第二题：JZ23-链表中环的入口结点-Middle"><a href="#第二题：JZ23-链表中环的入口结点-Middle" class="headerlink" title="第二题：JZ23 链表中环的入口结点(Middle)"></a>第二题：JZ23 链表中环的入口结点(Middle)</h2><h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h3><p>算法使用快慢指针技巧来判断链表中是否存在环，并找到环的入口节点。</p><p>首先，我们定义两个指针 fast 和 slow，初始时都指向链表的头节点 pHead。</p><p>接下来，我们使用一个循环来判断是否存在环。在循环中，慢指针 slow 每次向后移动一步，快指针 fast 每次向后移动两步。</p><p>如果存在环，那么快指针 fast 最终会追上慢指针 slow，它们会在环中的某个位置相遇。</p><p>一旦相遇，我们将快指针 fast 移回链表头节点 pHead，然后使用两个指针同时向后移动一步，直到它们再次相遇。这时，它们相遇的位置就是环的入口节点。</p><p>最后，我们返回找到的入口节点。</p><p>该算法的时间复杂度为 O(n)，其中 n 是链表的长度。在最坏情况下，快指针需要遍历整个链表才能找到环。</p><p>空间复杂度为 O(1)，即常数空间。只使用了两个额外的指针来标记快慢指针的位置。</p><p>以下是使用C++实现的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">detectCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否存在环，并找到相遇点</span></span><br><span class="line">    ListNode* slow = head;</span><br><span class="line">    ListNode* fast = head;</span><br><span class="line">    <span class="type">bool</span> hasCycle = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            hasCycle = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果不存在环，直接返回nullptr</span></span><br><span class="line">    <span class="keyword">if</span> (!hasCycle) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将快指针移回头节点，并与慢指针同时向后移动，直到它们再次相遇</span></span><br><span class="line">    fast = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建测试链表</span></span><br><span class="line">    ListNode* node1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    ListNode* node2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    ListNode* node3 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    ListNode* node4 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    ListNode* node5 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">    ListNode* node6 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = node4;</span><br><span class="line">    node4-&gt;next = node5;</span><br><span class="line">    node5-&gt;next = node6;</span><br><span class="line">    node6-&gt;next = node3;  <span class="comment">// 创建环，连接node6和node3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测环的入口节点</span></span><br><span class="line">    ListNode* entryNode = <span class="built_in">detectCycle</span>(node1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">if</span> (entryNode == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The linked list doesn&#x27;t have a cycle.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The entry node of the cycle is &quot;</span> &lt;&lt; entryNode-&gt;val &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    ListNode* cur = node1;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        ListNode* temp = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码，将会输出以下结果：</p><p>The entry node of the cycle is 3.</p><p>请注意，由于链表中存在环，所以我们输出了环的入口节点的值。如果链表中不存在环，则输出 “The linked list doesn’t have a cycle.”。</p><h2 id="第三题：JZ52-两个链表的第一个公共结点-Easy"><a href="#第三题：JZ52-两个链表的第一个公共结点-Easy" class="headerlink" title="第三题：JZ52 两个链表的第一个公共结点(Easy)"></a>第三题：JZ52 两个链表的第一个公共结点(Easy)</h2><h3 id="解析：-2"><a href="#解析：-2" class="headerlink" title="解析："></a>解析：</h3><p>首先，我们检查输入的链表是否为空，如果有一个为空，则直接返回 nullptr。</p><p>然后，我们创建两个指针 ta和 tb，并分别指向两个链表的头节点。</p><p>接下来，我们进入循环，判断 ta 和 tb 是否相等，如果相等，则说明找到了第一个公共节点，直接返回该节点。</p><p>如果 ta 不为空，则将 ta 移动到下一个节点；如果为空，则将 ta 指向 pHead2，继续遍历。</p><p>同样地，如果 tb 不为空，则将 tb 移动到下一个节点；如果为空，则将 tb 指向 pHead1，继续遍历。</p><p>循环会一直进行，直到找到第一个公共节点或者两个链表都遍历完。</p><p>最后，我们返回第一个公共节点的指针（可能为 nullptr）。</p><h2 id="第四题：JZ24-反转链表（Easy）"><a href="#第四题：JZ24-反转链表（Easy）" class="headerlink" title="第四题：JZ24 反转链表（Easy）"></a>第四题：JZ24 反转链表（Easy）</h2><h3 id="解析：-3"><a href="#解析：-3" class="headerlink" title="解析："></a>解析：</h3><p>函数的参数是一个指向链表头节点的指针 head，我们首先检查 head 是否为空，如果为空，则直接返回 nullptr 表示空链表。</p><p>接下来，我们创建一个 std::stack 对象 stack 来保存需要反转的链表节点。通过遍历原始链表，我们将每个节点依次入栈。</p><p>如果栈为空，说明原始链表没有节点，直接返回 nullptr。否则，我们取出栈顶节点并将其赋值给 node 和 dummy。然后，我们从栈中移除该节点。</p><p>接下来，我们从栈中依次取出节点，并将其连接成一个新的链表。我们使用 tempNode 临时存储每次从栈中取出的节点，并通过 node 将它们连接起来。</p><p>最后，我们需要将最后一个节点的 next 指针设置为 nullptr，以避免形成环。然后，我们返回 dummy 节点作为反转后的链表的新头节点。</p><h2 id="第五题：JZ6-从尾到头打印链表-Easy"><a href="#第五题：JZ6-从尾到头打印链表-Easy" class="headerlink" title="第五题：JZ6 从尾到头打印链表(Easy)"></a>第五题：JZ6 从尾到头打印链表(Easy)</h2><h3 id="解析：-4"><a href="#解析：-4" class="headerlink" title="解析："></a>解析：</h3><p>函数首先创建了一个空的 vector<int> 类型的结果向量 res 和一个空的 stack<int> 类型的栈 s。</p><p>接下来，函数通过遍历链表将链表中的节点值从头到尾依次压入栈中。</p><p>然后，函数通过循环将栈中的元素依次弹出，同时将弹出的元素添加到结果向量中。</p><p>最后，函数返回结果向量 res，其中存储了链表从尾到头的节点值。</p><h2 id="第六题：JZ25-合并两个排序的链表-Easy"><a href="#第六题：JZ25-合并两个排序的链表-Easy" class="headerlink" title="第六题：JZ25 合并两个排序的链表(Easy)"></a>第六题：JZ25 合并两个排序的链表(Easy)</h2><h3 id="解析：-5"><a href="#解析：-5" class="headerlink" title="解析："></a>解析：</h3><p>首先，我们进行空指针判断。如果其中一个链表为空，则直接返回另一个链表的头指针。</p><p>然后，我们创建一个新的链表头节点 <code>head</code> 和一个指向当前节点的指针 <code>cur</code>，初始时它们都指向一个值为 0 的节点。</p><p>接下来，我们使用循环来遍历两个链表，比较节点的值大小，将较小的节点接入新的链表中，同时更新指针的位置。</p><p>最后，我们检查是否有链表还有剩余节点，如果有，则将剩余节点接入新的链表的尾部。</p><p>最后，我们返回 <code>head-&gt;next</code>，即合并后的有序链表的头指针。</p><h2 id="第七题：JZ22-链表中倒数最后k个结点-Easy"><a href="#第七题：JZ22-链表中倒数最后k个结点-Easy" class="headerlink" title="第七题：JZ22 链表中倒数最后k个结点(Easy)"></a>第七题：JZ22 链表中倒数最后k个结点(Easy)</h2><h3 id="解析：-6"><a href="#解析：-6" class="headerlink" title="解析："></a>解析：</h3><p>首先，我们定义两个指针 fast 和 slow，初始时都指向链表的头节点 pHead。</p><p>然后，我们让快指针 fast 先行 k 步。在每一步循环中，我们检查 fast 是否为 nullptr，如果不是，则将 fast 指针向后移动一个节点，表示快指针先行 k 步。如果 fast 为 nullptr，说明链表的长度不足 k，直接返回 nullptr。</p><p>接下来，我们同时移动快指针 fast 和慢指针 slow，直到快指针 fast 到达链表的末尾（即 fast 为 nullptr）。在每一步循环中，我们先将 fast 指针向后移动一个节点，然后再将 slow 指针向后移动一个节点。最终，当快指针 fast 到达链表末尾时，慢指针 slow 就指向了倒数第 k 个节点。</p><p>最后，我们返回慢指针 slow 所指向的节点作为结果。</p><h2 id="第八题：JZ76-删除链表中重复的结点-Middle"><a href="#第八题：JZ76-删除链表中重复的结点-Middle" class="headerlink" title="第八题：JZ76 删除链表中重复的结点(Middle)"></a>第八题：JZ76 删除链表中重复的结点(Middle)</h2><h3 id="解析：-7"><a href="#解析：-7" class="headerlink" title="解析："></a>解析：</h3><p>首先，我们创建一个哨兵节点 res，并将其 next 指针指向原始的链表头节点 pHead，以便在删除操作时可以处理头节点的情况。</p><p>然后，我们定义一个指针 cur，初始时指向哨兵节点 res。</p><p>接下来，我们使用 cur 指针遍历链表，查找重复节点。如果当前节点的值和下一个节点的值相同，说明遇到了重复节点。我们使用一个临时变量 temp 来保存重复节点的值，并通过循环将所有相同的节点跳过。</p><p>如果当前节点和下一个节点的值不相同，说明没有遇到重复节点，我们将 cur 指针向后移动一位。</p><p>最后，我们返回去掉哨兵节点的链表，即返回哨兵节点的 next 指针。</p><p>这段代码的时间复杂度为 O(n)，其中 n 是链表的长度。因为我们需要遍历整个链表来删除重复节点。</p><p>空间复杂度为 O(1)，即常数空间。虽然创建了一个哨兵节点，但它不随输入链表的长度而变化，并且在返回结果时并没有将其计入空间占用。</p><p>以下是使用C++实现的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="literal">nullptr</span> || pHead-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ListNode* res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);  <span class="comment">// 哨兵节点</span></span><br><span class="line">    res-&gt;next = pHead;</span><br><span class="line">    </span><br><span class="line">    ListNode* cur = res;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val) &#123;</span><br><span class="line">            <span class="type">int</span> temp = cur-&gt;next-&gt;val;</span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;val == temp) &#123;</span><br><span class="line">                ListNode* delNode = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> delNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ListNode* result = res-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ListNode* node1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    ListNode* node2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    ListNode* node3 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    ListNode* node4 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    ListNode* node5 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    ListNode* node6 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    ListNode* node7 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = node4;</span><br><span class="line">    node4-&gt;next = node5;</span><br><span class="line">    node5-&gt;next = node6;</span><br><span class="line">    node6-&gt;next = node7;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Original List: &quot;</span>;</span><br><span class="line">    <span class="built_in">printList</span>(node1);</span><br><span class="line">    </span><br><span class="line">    ListNode* result = <span class="built_in">deleteDuplication</span>(node1);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After Deletion: &quot;</span>;</span><br><span class="line">    <span class="built_in">printList</span>(result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    ListNode* cur = result;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        ListNode* temp = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码，将会输出以下结果：</p><p>Original List: 1 2 3 3 4 4 5<br>After Deletion: 1 2 5 </p><p>请注意，原始链表中有重复的节点 3 和 4，在删除重复节点后，我们得到的链表为 1 2 5。</p><h2 id="第九题：JZ18-删除链表的节点-Easy"><a href="#第九题：JZ18-删除链表的节点-Easy" class="headerlink" title="第九题：JZ18 删除链表的节点(Easy)"></a>第九题：JZ18 删除链表的节点(Easy)</h2><h3 id="解析：-8"><a href="#解析：-8" class="headerlink" title="解析："></a>解析：</h3><p>首先，我们创建一个哨兵节点 res，并将其 next 指针指向原始的链表头节点 head，以便在删除操作时可以处理头节点的情况。</p><p>然后，我们定义两个指针 pre 和 cur，初始时分别指向哨兵节点 res 和链表头节点 head。</p><p>接下来，我们使用 cur 指针遍历链表，查找目标节点。如果当前节点的值等于目标值 val，则将前序节点 pre 的 next 指针指向当前节点的下一个节点，即删除目标节点。然后，我们使用 break 语句跳出循环。</p><p>最后，我们返回去掉哨兵节点的链表，即返回哨兵节点的 next 指针。</p><p>这段代码的时间复杂度为 O(n)，其中 n 是链表的长度。因为我们需要遍历整个链表来查找目标节点。</p><p>空间复杂度为 O(1)，即常数空间。虽然创建了一个哨兵节点，但它不随输入链表的长度而变化，并且在返回结果时并没有将其计入空间占用。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/20/hello-world/"/>
      <url>/2023/04/20/hello-world/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31654455&auto=1&height=66"></iframe><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
