<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xiao-first-blog</title>
      <link href="/2023/08/09/xiao-first-blog/"/>
      <url>/2023/08/09/xiao-first-blog/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是小萧~~~</p><p>本文目标：解析剑指offer————链表专栏</p><p>格式采用#题目描述##算法思路###代码编写展开</p><p>序号代表困难等级，1表示困难，2表示中等，3表示简单，比如下面先拿困难题hard里的一道算法题开刀，记1-1</p><p>1-1题目描述：JZ35 复杂链表的复制</p><p>1-2算法思路：<br>【1】算法首先检查链表是否为空，如果是空链表，则直接返回。<br>【2】接下来，算法遍历原始链表，并进行拷贝操作。对于每个原始节点 cur，都创建一个新节点 clone，其值为原始节点的值。然后将新节点 clone 插入到原始节点 cur 后面。这样，新的链表中的节点就是原始链表的节点的拷贝。<br>【3】接着，算法再次遍历链表，连接新链表的 random 节点。根据原始链表中的 random 指针，我们可以找到对应节点的拷贝节点的位置，然后将其赋给新链表节点的 random 指针。<br>【4】最后，算法再次遍历链表，拆分原始链表和新链表。对于每个节点，我们将原始链表中的节点的 next 指针指向下一个原始节点，将新链表中的节点的 next 指针指向下一个新节点。<br>【5】最终，算法返回复制后的链表的头指针。<br>【6】该算法的时间复杂度为 O(n)，其中 n 是链表的长度。需要遍历链表三次，每次遍历都需要线性时间。<br>【7】空间复杂度为 O(1)，即常数空间。除了复制出的新节点和一些指针变量外，没有使用额外的空间。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer_链表第00期</title>
      <link href="/2023/08/08/%E5%89%91%E6%8C%87offer/"/>
      <url>/2023/08/08/%E5%89%91%E6%8C%87offer/</url>
      
        <content type="html"><![CDATA[<h1 id="链表算法题解析"><a href="#链表算法题解析" class="headerlink" title="链表算法题解析"></a>链表算法题解析</h1><p>我将对剑指offer里关于链表这一数据结构的经典算法题做解析，计划分三期，每期三题，本文为第一期。</p><h2 id="第一题：JZ35-复杂链表的复制（Hard）"><a href="#第一题：JZ35-复杂链表的复制（Hard）" class="headerlink" title="第一题：JZ35 复杂链表的复制（Hard）"></a>第一题：JZ35 复杂链表的复制（Hard）</h2><h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>算法首先检查链表是否为空，如果是空链表，则直接返回。</p><p>接下来，算法遍历原始链表，并进行拷贝操作。对于每个原始节点 <code>cur</code>，都创建一个新节点 <code>clone</code>，其值为原始节点的值。然后将新节点 <code>clone</code> 插入到原始节点 <code>cur</code> 后面。这样，新的链表中的节点就是原始链表的节点的拷贝。</p><p>接着，算法再次遍历链表，连接新链表的 <code>random</code> 节点。根据原始链表中的 <code>random</code> 指针，我们可以找到对应节点的拷贝节点的位置，然后将其赋给新链表节点的 <code>random</code> 指针。</p><p>最后，算法再次遍历链表，拆分原始链表和新链表。对于每个节点，我们将原始链表中的节点的 <code>next</code> 指针指向下一个原始节点，将新链表中的节点的 <code>next</code> 指针指向下一个新节点。</p><p>最终，算法返回复制后的链表的头指针。</p><p>该算法的时间复杂度为 O(n)，其中 n 是链表的长度。需要遍历链表三次，每次遍历都需要线性时间。</p><p>空间复杂度为 O(1)，即常数空间。除了复制出的新节点和一些指针变量外，没有使用额外的空间。</p><h2 id="第二题：JZ23-链表中环的入口结点-Middle"><a href="#第二题：JZ23-链表中环的入口结点-Middle" class="headerlink" title="第二题：JZ23 链表中环的入口结点(Middle)"></a>第二题：JZ23 链表中环的入口结点(Middle)</h2><h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h3><p>算法使用快慢指针技巧来判断链表中是否存在环，并找到环的入口节点。</p><p>首先，我们定义两个指针 fast 和 slow，初始时都指向链表的头节点 pHead。</p><p>接下来，我们使用一个循环来判断是否存在环。在循环中，慢指针 slow 每次向后移动一步，快指针 fast 每次向后移动两步。</p><p>如果存在环，那么快指针 fast 最终会追上慢指针 slow，它们会在环中的某个位置相遇。</p><p>一旦相遇，我们将快指针 fast 移回链表头节点 pHead，然后使用两个指针同时向后移动一步，直到它们再次相遇。这时，它们相遇的位置就是环的入口节点。</p><p>最后，我们返回找到的入口节点。</p><p>该算法的时间复杂度为 O(n)，其中 n 是链表的长度。在最坏情况下，快指针需要遍历整个链表才能找到环。</p><p>空间复杂度为 O(1)，即常数空间。只使用了两个额外的指针来标记快慢指针的位置。</p><h2 id="第三题：JZ25-合并两个排序的链表-Easy"><a href="#第三题：JZ25-合并两个排序的链表-Easy" class="headerlink" title="第三题：JZ25 合并两个排序的链表(Easy)"></a>第三题：JZ25 合并两个排序的链表(Easy)</h2><h3 id="解析：-2"><a href="#解析：-2" class="headerlink" title="解析："></a>解析：</h3><p>首先，我们进行空指针判断。如果其中一个链表为空，则直接返回另一个链表的头指针。</p><p>然后，我们创建一个新的链表头节点 <code>head</code> 和一个指向当前节点的指针 <code>cur</code>，初始时它们都指向一个值为 0 的节点。</p><p>接下来，我们使用循环来遍历两个链表，比较节点的值大小，将较小的节点接入新的链表中，同时更新指针的位置。</p><p>最后，我们检查是否有链表还有剩余节点，如果有，则将剩余节点接入新的链表的尾部。</p><p>最后，我们返回 <code>head-&gt;next</code>，即合并后的有序链表的头指针。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/20/hello-world/"/>
      <url>/2023/04/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
